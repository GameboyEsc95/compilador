tipos_primitivos ::= 'entero' | 'flotante' | 'booleano' | 'caracter'
tipos_compuestos ::= 'cadena' | 'arreglo' | 'estructura'
tipos_usuario ::= 'clase' | 'interfaz' | 'enumeracion'
tipo ::= tipos_primitivos | tipos_compuestos | tipos_usuario
declaracion_variable ::= tipo identificador ( '=' expresion )?
declaracion_constante ::= 'constante' tipo identificador '=' expresion
alcance ::= 'global' | 'local' | 'bloque'
operador_aritmetico ::= '+' | '-' | '*' | '/' | '%'
operador_relacional ::= '<' | '>' | '<=' | '>=' | '==' | '!='
operador_logico ::= '♯' | '♬' | '𝄽'
operador_asignacion ::= '=' | '+=' | '-=' | '*=' | '/='
condicional ::= 'si' '(' expresion ')' 'entonces' '{' bloque_codigo '}' ( 'sino' '{' bloque_codigo '}' )?
bucle_for ::= 'para' '(' declaracion_variable ';' expresion ';' expresion ')' '{' bloque_codigo '}'
bucle_while ::= 'mientras' '(' expresion ')' '{' bloque_codigo '}'
control_flujo ::= 'cortar' | 'seguir' | 'finalizar' ( expresion )?
declaracion_funcion ::= 'funcion' identificador '(' ( parametros )? ')' ( '->' tipo )? '{' bloque_codigo '}'
parametros ::= parametro ( ',' parametro )*
parametro ::= tipo identificador
sobrecarga_funcion ::= declaracion_funcion*
comentario_linea ::= '♪' texto
comentario_multilinea ::= '♪*' texto '*♪'
documentacion ::= '♪♪♪' texto
try_catch ::= 'try' '{' bloque_codigo '}' 'catch' '(' excepcion ')' '{' bloque_codigo '}'
excepcion ::= identificador
manejo_errores_personalizado ::= 'error' identificador '{' bloque_codigo '}'
importacion ::= 'importar' identificador
exportacion ::= 'exportar' identificador
espacio_nombres ::= 'namespace' identificador '{' bloque_codigo '}'
gestion_dependencias ::= 'dependencia' identificador '=' cadena
declaracion_clase ::= 'clase' identificador ( 'nuevo' identificador )? '{' bloque_codigo '}'
herencia ::= 'remix' identificador
polimorfismo ::= 'remaster' identificador
encapsulamiento ::= 'privado' | 'protegido' | 'publico'
interfaz ::= 'interfaz' identificador '{' bloque_codigo '}'
clase_abstracta ::= 'abstracta' 'clase' identificador '{' bloque_codigo '}'
estructura_datos ::= 'acorde' | 'pila' | 'cola' | 'diccionario'
funcion_entrada_salida ::= 'reproducir' '(' expresion ')' | 'escuchar' '()'
identificador ::= [a-zA-Z_][a-zA-Z0-9_]* 
expresion ::= identificador | numero | cadena | operacion
numero ::= [0-9]+
cadena ::= '"' [^"]* '"'
texto ::= [^'♪*']*
bloque_codigo ::= (declaracion_variable | declaracion_funcion | sentencia)*
sentencia ::= condicional | bucle_for | bucle_while | control_flujo | asignacion
asignacion ::= identificador operador_asignacion expresion
operacion ::= expresion operador_aritmetico expresion | expresion operador_relacional expresion | expresion operador_logico expresion
