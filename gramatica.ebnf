%import common.CNAME -> IDENTIFICADOR
%import common.SIGNED_NUMBER -> NUMERO
%import common.WS
%ignore WS

CADENA: "\"" /[^"]*/ "\""
OPERADOR_LOGICO: "&&" | "||" | "!"
OPERADOR_RELACIONAL: "<" | ">" | "<=" | ">=" | "==" | "!="
OPERADOR_ASIGNACION: "=" | "+=" | "-=" | "*=" | "/="
OPERADOR_INCREMENTO: "++" | "--"

// Reglas principales

start: bloque_codigo

bloque_codigo: (declaracion_variable | declaracion_funcion | sentencia)*

declaracion_variable: tipo IDENTIFICADOR OPERADOR_ASIGNACION expresion
declaracion_constante: "constante" tipo IDENTIFICADOR "=" expresion

tipo: TIPO_ENTERO | TIPO_FLOTANTE | TIPO_BOOLEANO | TIPO_CARACTER
    | TIPO_CADENA | TIPO_ARREGLO | TIPO_ESTRUCTURA
    | TIPO_CLASE | TIPO_INTERFAZ | TIPO_ENUMERACION

TIPO_ENTERO: "entero"
TIPO_FLOTANTE: "flotante"
TIPO_BOOLEANO: "booleano"
TIPO_CARACTER: "caracter"
TIPO_CADENA: "cadena"
TIPO_ARREGLO: "arreglo"
TIPO_ESTRUCTURA: "estructura"
TIPO_CLASE: "clase"
TIPO_INTERFAZ: "interfaz"
TIPO_ENUMERACION: "enumeracion"

sentencia: condicional
         | bucle_for
         | bucle_while
         | control_flujo
         | asignacion

condicional: "si" "(" expresion ")" "entonces" "{" bloque_codigo "}" ("else" "{" bloque_codigo "}")?
bucle_for: "para" "(" declaracion_variable ";" expresion ";" incremento ")" "{" bloque_codigo "}"
bucle_while: "mientras" "(" expresion ")" "{" bloque_codigo "}"
control_flujo: "cortar" | "seguir" | "finalizar" expresion?

asignacion: IDENTIFICADOR OPERADOR_ASIGNACION expresion

declaracion_funcion: "funcion" IDENTIFICADOR "(" parametros? ")" ("->" tipo)? "{" bloque_codigo "}"
parametros: parametro ("," parametro)*
parametro: tipo IDENTIFICADOR

// EXPRESIONES con precedencia

?expresion: logica

?logica: relacional
       | logica OPERADOR_LOGICO relacional      -> expresion_logica

?relacional: suma
           | suma OPERADOR_RELACIONAL suma      -> expresion_relacional

?suma: producto
     | suma "+" producto                        -> suma
     | suma "-" producto                        -> resta

?producto: unario
         | producto "*" unario                  -> multiplicacion
         | producto "/" unario                  -> division
         | producto "%" unario                  -> modulo

?unario: "-" unario                             -> negativo
       | "+" unario                             -> positivo
       | incremento
       | primario

?incremento: IDENTIFICADOR OPERADOR_INCREMENTO  -> incremento_post
           | OPERADOR_INCREMENTO IDENTIFICADOR  -> incremento_pre

?primario: IDENTIFICADOR
         | NUMERO
         | CADENA
         | "(" expresion ")"
